{"version":3,"sources":["ng://angular-gridster2/lib/gridsterScroll.service.ts","ng://angular-gridster2/lib/gridsterConfig.interface.ts","ng://angular-gridster2/lib/gridsterConfig.constant.ts","ng://angular-gridster2/lib/gridsterUtils.service.ts","ng://angular-gridster2/lib/gridster.interface.ts","ng://angular-gridster2/lib/gridsterEmptyCell.service.ts","ng://angular-gridster2/lib/gridsterCompact.service.ts","ng://angular-gridster2/lib/gridsterRenderer.service.ts","ng://angular-gridster2/lib/gridster.component.ts","ng://angular-gridster2/lib/gridsterItemComponent.interface.ts","ng://angular-gridster2/lib/gridsterSwap.service.ts","ng://angular-gridster2/lib/gridsterPush.service.ts","ng://angular-gridster2/lib/gridsterDraggable.service.ts","ng://angular-gridster2/lib/gridsterPushResize.service.ts","ng://angular-gridster2/lib/gridsterResizable.service.ts","ng://angular-gridster2/lib/gridsterItem.component.ts","ng://angular-gridster2/lib/gridsterPreview.component.ts","ng://angular-gridster2/lib/gridster.module.ts"],"names":["scrollSensitivity","scrollSpeed","gridsterElement","resizeEvent","resizeEventType","intervalE","intervalW","intervalN","intervalS","Fit","ScrollVertical","ScrollHorizontal","Fixed","VerticalFixed","HorizontalFixed","Always","OnDragAndResize","None","CompactUp","CompactLeft","CompactUpAndLeft","CompactLeftAndUp","CompactUpAndRight","GridsterConfigService","gridType","GridType","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","setGridSize","compactType","CompactType","mobileBreakpoint","minCols","maxCols","minRows","maxRows","defaultItemCols","defaultItemRows","maxItemCols","maxItemRows","minItemCols","minItemRows","minItemArea","maxItemArea","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","initCallback","undefined","destroyCallback","gridSizeChangedCallback","itemChangeCallback","itemResizeCallback","itemInitCallback","itemRemovedCallback","itemValidateCallback","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","emptyCellClickCallback","emptyCellContextMenuCallback","emptyCellDropCallback","emptyCellDragCallback","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","delayStart","enabled","ignoreContentClass","ignoreContent","dragHandleClass","stop","start","dropOverItems","dropOverItemsCallback","resizable","handles","s","e","n","w","se","ne","sw","nw","swap","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","DisplayGrid","disableWindowResize","disableWarnings","scrollToNewItems","disableAutoPositionOnConflict","GridsterUtils","merge","obj1","obj2","properties","p","hasOwnProperty","debounce","func","wait","timeout","context","this","args","arguments","clearTimeout","setTimeout","apply","checkTouchEvent","clientX","touches","length","clientY","changedTouches","checkContentClassForEvent","gridster","$options","checkContentClass","target","currentTarget","checkContentClassForEmptyCellClickEvent","current","contentClass","hasAttribute","getAttribute","split","indexOf","parentNode","compareItems","a","b","y","x","Injectable","GridsterComponentInterface","GridsterEmptyCell","prototype","destroy","initialItem","movingItem","previewStyle","emptyCellExit","updateOptions","_this","emptyCellClick","options","renderer","listen","el","emptyCellClickCb","bind","emptyCellClickTouch","emptyCellContextMenu","emptyCellContextMenuCb","emptyCellDrop","emptyCellDragDrop","zone","runOutsideAngular","emptyCellMove","emptyCellDragOver","emptyCellDrag","emptyCellMouseDown","emptyCellDragTouch","item","getValidItemFromEvent","cdRef","markForCheck","preventDefault","stopPropagation","dataTransfer","dropEffect","emptyCellMMove","emptyCellMouseMove","emptyCellMMoveTouch","emptyCellUp","emptyCellMouseUp","emptyCellUpTouch","oldItem","rect","getBoundingClientRect","scrollLeft","left","scrollTop","top","pixelsToPositionX","Math","floor","pixelsToPositionY","cols","rows","min","abs","checkCollision","GridsterCompact","moveRightTillCollision","checkCompact","checkCompactUp","checkCompactLeft","checkCompactRight","checkCompactItem","moveUpTillCollision","moveLeftTillCollision","widget","widgetMovedUp","l","grid","i","$item","compactEnabled","itemChanged","GridsterRenderer","updateItem","mobile","setStyle","curWidth","round","curColWidth","curRowHeight","width","height","transform","marginBottom","marginRight","columns","updateGridster","addClass","removeClass1","removeClass2","removeClass3","removeClass","getGridColumnStyle","gridRows","getGridRowStyle","gridColumns","GridsterComponent","nativeElement","JSON","parse","stringify","calculateLayoutDebounce","calculateLayout","curHeight","dragInProgress","emptyCell","compact","gridRenderer","checkCollisionTwoItems","item2","ngOnInit","ngOnChanges","changes","setOptions","api","optionsChanged","resize","onResize","getNextPossiblePosition","getFirstPossiblePosition","getLastPossiblePosition","clientWidth","clientHeight","offsetWidth","offsetHeight","checkIfToResize","windowResize","widgetsIndex","ngOnDestroy","scrollWidth","scrollHeight","setGridDimensions","notPlaced","max","marginWidth","marginHeight","updateGrid","setSize","drag","toggle","addItem","itemComponent","autoPositionItem","console","warn","push","removeItem","splice","collision","checkGridCollision","c","findItemWithItem","noNegativePosition","maxGridCols","maxGridRows","inColsLimits","inRowsLimits","minAreaLimit","maxAreaLimit","area","findItemsWithItem","newItem","startingFrom","colsIndex","rowsIndex","canAddToRows","canAddToColumns","tmpItem","Object","assign","farthestItem","reduce","prev","curr","currCoords","roundingMethod","noLimit","position","positionXToPixels","positionYToPixels","Component","selector","template","encapsulation","ViewEncapsulation","ElementRef","Renderer2","ChangeDetectorRef","NgZone","Input","GridsterItemComponentInterface","GridsterSwap","gridsterItem","swapedItem","swapItems","checkSwapBack","checkSwap","restoreSwapItem","setSwapItem","checkItemChanges","pushedBy","gridsterItemCollision","canBeDragged","gridsterItemCollide","copyCollisionX","copyCollisionY","copyX","copyY","intervalDuration","scroll","lastMouse","calculateItemPosition","resizeEventScrollType","offsetLeft","offsetTop","elemTopOffset","elemBottomOffset","cancelN","startVertical","cancelS","cancelVertical","elemRightOffset","elemLeftOffset","cancelW","startHorizontal","cancelE","cancelHorizontal","sign","setInterval","cancelScroll","clearInterval","GridsterPush","pushedItems","pushedItemsTemp","pushedItemsTempPath","pushedItemsPath","tryPattern","fromEast","tryWest","trySouth","tryNorth","tryEast","fromWest","fromNorth","fromSouth","direction","disable","pushedItemsOrder","pushed","restoreTempItems","removeFromTempPushed","restoreItems","pushedItem","setPushedItems","checkPushBack","change","checkPushedItem","itemCollision","makePush","find","call","lastIndexOf","j","pop","removeFromPushedItem","addToTempPushed","addToPushed","tempPosition","removeFromPushed","lastPosition","path","GridsterDraggable","mousedown","touchstart","dragStart","which","dragFunction","dragMove","dragStopFunction","dragStop","mousemove","touchmove","mouseup","mouseleave","cancelOnBlur","touchend","touchcancel","diffLeft","diffTop","calculateItemPositionFromMousePosition","run","Promise","resolve","then","makeDrag","cancelDrag","positionX","positionY","positionXBackup","positionYBackup","enableDrag","dragStartFunction","dragStartDelay","cancelMouse","cancelMouseLeave","cancelTouchMove","cancelMove","eventMove","cancelTouchEnd","cancelTouchCancel","GridsterPushResize","row","canBeResized","backUpY","backUpRows","backUpX","backUpCols","GridsterResizable","itemBackup","bottom","right","diffRight","diffBottom","minHeight","minWidth","pushResize","directionFunction","handleN","handleW","handleS","handleE","handleNW","handleNE","handleSW","handleSE","makeResize","cancelResize","newPosition","setItemTop","setItemHeight","setItemLeft","setItemWidth","ceil","resizeEnabled","GridsterItemComponent","dragEnabled","updateItemSize","init","scrollIntoView","newValue","oldValue","decorators","type","Host","GridsterPreviewComponent","GridsterModule","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap"],"mappings":"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","sourcesContent":["import {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nlet scrollSensitivity: number;\nlet scrollSpeed: number;\nconst intervalDuration = 50;\nlet gridsterElement: any;\nlet resizeEvent: boolean | undefined;\nlet resizeEventType: GridsterResizeEventType | undefined;\nlet intervalE: number;\nlet intervalW: number;\nlet intervalN: number;\nlet intervalS: number;\n\nexport function scroll(gridster: GridsterComponentInterface, left: number, top: number, width: number, height: number,\n                       e: MouseEvent, lastMouse: any,\n                       calculateItemPosition: Function, resize?: boolean, resizeEventScrollType?: GridsterResizeEventType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n  if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n    cancelN();\n    if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\n      return;\n    }\n    intervalS = startVertical(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n    cancelS();\n    if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\n      return;\n    }\n    intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY !== e.clientY) {\n    cancelVertical();\n  }\n\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n  if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n    cancelW();\n    if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\n      return;\n    }\n    intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n    cancelE();\n    if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\n      return;\n    }\n    intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX !== e.clientX) {\n    cancelHorizontal();\n  }\n}\n\nfunction startVertical(sign: number, calculateItemPosition: Function, lastMouse: any): any {\n  let clientY = lastMouse.clientY;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({clientX: lastMouse.clientX, clientY: clientY});\n  }, intervalDuration);\n}\n\nfunction startHorizontal(sign: number, calculateItemPosition: Function, lastMouse: any): any {\n  let clientX = lastMouse.clientX;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({clientX: clientX, clientY: lastMouse.clientY});\n  }, intervalDuration);\n}\n\nexport function cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = undefined;\n}\n\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\n\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\n\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n","import {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport type gridTypes = 'fit' | 'scrollVertical' | 'scrollHorizontal' | 'fixed' | 'verticalFixed' | 'horizontalFixed';\nexport type displayGrids = 'always' | 'onDrag&Resize' | 'none';\nexport type compactTypes = 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up' | 'compactUp&Right';\n\nexport enum GridType {\n  Fit = 'fit',\n  ScrollVertical = 'scrollVertical',\n  ScrollHorizontal = 'scrollHorizontal',\n  Fixed = 'fixed',\n  VerticalFixed = 'verticalFixed',\n  HorizontalFixed = 'horizontalFixed'\n}\n\nexport enum DisplayGrid {\n  Always = 'always',\n  OnDragAndResize = 'onDrag&Resize',\n  None = 'none'\n}\n\nexport enum CompactType {\n  None = 'none',\n  CompactUp = 'compactUp',\n  CompactLeft = 'compactLeft',\n  CompactUpAndLeft = 'compactUp&Left',\n  CompactLeftAndUp = 'compactLeft&Up',\n  CompactUpAndRight = 'compactUp&Right'\n}\n\nexport interface GridsterConfig {\n  gridType?: gridTypes;\n  fixedColWidth?: number;\n  fixedRowHeight?: number;\n  keepFixedHeightInMobile?: boolean;\n  keepFixedWidthInMobile?: boolean;\n  setGridSize?: boolean;\n  compactType?: compactTypes;\n  mobileBreakpoint?: number;\n  minCols?: number;\n  maxCols?: number;\n  minRows?: number;\n  maxRows?: number;\n  defaultItemCols?: number;\n  defaultItemRows?: number;\n  maxItemCols?: number;\n  maxItemRows?: number;\n  minItemCols?: number;\n  minItemRows?: number;\n  minItemArea?: number;\n  maxItemArea?: number;\n  margin?: number;\n  outerMargin?: boolean;\n  outerMarginTop?: number | null;\n  outerMarginRight?: number | null;\n  outerMarginBottom?: number | null;\n  outerMarginLeft?: number | null;\n  scrollSensitivity?: number | null;\n  scrollSpeed?: number;\n  initCallback?: (gridster: GridsterComponentInterface) => void;\n  destroyCallback?: (gridster: GridsterComponentInterface) => void;\n  gridSizeChangedCallback?: (gridster: GridsterComponentInterface) => void;\n  itemChangeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemResizeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemInitCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemRemovedCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemValidateCallback?: (item: GridsterItem) => boolean;\n  draggable?: Draggable;\n  resizable?: Resizable;\n  swap?: boolean;\n  pushItems?: boolean;\n  disablePushOnDrag?: boolean;\n  disablePushOnResize?: boolean;\n  disableAutoPositionOnConflict?: boolean;\n  pushDirections?: PushDirections;\n  pushResizeItems?: boolean;\n  displayGrid?: displayGrids;\n  disableWindowResize?: boolean;\n  disableWarnings?: boolean;\n  scrollToNewItems?: boolean;\n  enableEmptyCellClick?: boolean;\n  enableEmptyCellContextMenu?: boolean;\n  enableEmptyCellDrop?: boolean;\n  enableEmptyCellDrag?: boolean;\n  emptyCellClickCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellContextMenuCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDropCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragMaxCols?: number;\n  emptyCellDragMaxRows?: number;\n  ignoreMarginInRow?: boolean;\n  api?: {\n    resize?: () => void,\n    optionsChanged?: () => void,\n    getNextPossiblePosition?: (newItem: GridsterItem) => boolean,\n    getFirstPossiblePosition?: (item: GridsterItem) => GridsterItem,\n    getLastPossiblePosition?: (item: GridsterItem) => GridsterItem,\n  };\n\n  [propName: string]: any;\n}\n\nexport interface DragBase {\n  enabled?: boolean;\n  stop?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => Promise<any> | void;\n  start?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => void;\n  delayStart?: number;\n}\n\nexport interface Draggable extends DragBase {\n  ignoreContentClass?: string;\n  ignoreContent?: boolean;\n  dragHandleClass?: string;\n  dropOverItems?: boolean;\n  dropOverItemsCallback?: (source: GridsterItem, target: GridsterItem, grid?: GridsterComponentInterface) => void;\n}\n\nexport interface Resizable extends DragBase {\n  handles?: {\n    s: boolean,\n    e: boolean,\n    n: boolean,\n    w: boolean,\n    se: boolean,\n    ne: boolean,\n    sw: boolean,\n    nw: boolean\n  };\n}\n\nexport interface PushDirections {\n  north: boolean;\n  east: boolean;\n  south: boolean;\n  west: boolean;\n}\n","import {CompactType, DisplayGrid, GridsterConfig, GridType} from './gridsterConfig.interface';\n\nexport const GridsterConfigService: GridsterConfig = {\n  gridType: GridType.Fit, // 'fit' will fit the items in the container without scroll;\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250, // fixed col width for gridType: 'fixed'\n  fixedRowHeight: 250, // fixed row height for gridType: 'fixed'\n  keepFixedHeightInMobile: false, // keep the height from fixed gridType in mobile layout\n  keepFixedWidthInMobile: false, // keep the width from fixed gridType in mobile layout\n  setGridSize: false, // sets grid size depending on content\n  compactType: CompactType.None, // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n  mobileBreakpoint: 640, // if the screen is not wider that this, remove the grid layout and stack the items\n  minCols: 1, // minimum amount of columns in the grid\n  maxCols: 100, // maximum amount of columns in the grid\n  minRows: 1, // minimum amount of rows in the grid\n  maxRows: 100, // maximum amount of rows in the grid\n  defaultItemCols: 1, // default width of an item in columns\n  defaultItemRows: 1, // default height of an item in rows\n  maxItemCols: 50, // max item number of cols\n  maxItemRows: 50, // max item number of rows\n  minItemCols: 1, // min item number of columns\n  minItemRows: 1, // min item number of rows\n  minItemArea: 1, // min item area: cols * rows\n  maxItemArea: 2500, // max item area: cols * rows\n  margin: 10,  // margin between grid items\n  outerMargin: true,  // if margins will apply to the sides of the container\n  outerMarginTop: null, // override outer margin for grid\n  outerMarginRight: null, // override outer margin for grid\n  outerMarginBottom: null, // override outer margin for grid\n  outerMarginLeft: null, // override outer margin for grid\n  scrollSensitivity: 10,  // margin of the dashboard where to start scrolling\n  scrollSpeed: 20,  // how much to scroll each mouse move when in the scrollSensitivity zone\n  initCallback: undefined, // callback to call after grid has initialized. Arguments: gridsterComponent\n  destroyCallback: undefined, // callback to call after grid has destroyed. Arguments: gridsterComponent\n  gridSizeChangedCallback: undefined, // callback to call after grid has changed size. Arguments: gridsterComponent\n  itemChangeCallback: undefined,  // callback to call for each item when is changes x, y, rows, cols.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,  // callback to call for each item when width/height changes.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,  // callback to call to validate item position/size. Return true if valid.\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false, // enable empty cell click events\n  enableEmptyCellContextMenu: false, // enable empty cell context menu (right click) events\n  enableEmptyCellDrop: false, // enable empty cell drop events\n  enableEmptyCellDrag: false, // enable empty cell drag events\n  emptyCellClickCallback: undefined, // empty cell click callback\n  emptyCellContextMenuCallback: undefined, // empty cell context menu (right click) callback\n  emptyCellDropCallback: undefined, // empty cell drag drop callback. HTML5 Drag & Drop\n  emptyCellDragCallback: undefined, // empty cell drag and create item like excel cell selection\n  emptyCellDragMaxCols: 50, // limit empty cell drag max cols\n  emptyCellDragMaxRows: 50, // limit empty cell drag max rows\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false, // ignore the gap between rows for items which span multiple rows (see #162, #224)\n  draggable: {\n    delayStart: 0, // milliseconds to delay the start of drag, useful for touch interaction\n    enabled: false, // enable/disable draggable items\n    ignoreContentClass: 'gridster-item-content', // default content class to ignore the drag event from\n    ignoreContent: false, // if true drag will start only from elements from `dragHandleClass`\n    dragHandleClass: 'drag-handler', // drag event only from this class. If `ignoreContent` is true.\n    stop: undefined, // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n    start: undefined, // callback when dragging an item starts.\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false, // enable drop items on top other item\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n  },\n  resizable: {\n    delayStart: 0, // milliseconds to delay the start of resize, useful for touch interaction\n    enabled: false, // enable/disable resizable items\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    }, // resizable edges of an item\n    stop: undefined, // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n  },\n  swap: true, // allow items to switch position if drop on top of another\n  pushItems: false, // push items when resizing and dragging\n  disablePushOnDrag: false, // disable push on drag\n  disablePushOnResize: false, // disable push on resize\n  pushDirections: {north: true, east: true, south: true, west: true}, // control the directions items are pushed\n  pushResizeItems: false, // on resize of item will shrink adjacent items\n  displayGrid: DisplayGrid.OnDragAndResize, // display background grid of rows and columns\n  disableWindowResize: false, // disable the window on resize listener. This will stop grid to recalculate on window resize.\n  disableWarnings: false, // disable console log warnings about misplacement of grid items\n  scrollToNewItems: false, // scroll to new items placed in a scrollable view\n  disableAutoPositionOnConflict: false  // disable auto-position of items on conflict state\n};\n","import {Injectable} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterUtils {\n\n  static merge(obj1: any, obj2: any, properties: any) {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n\n    return obj1;\n  }\n\n  static debounce(func: Function, wait: number): () => void {\n    let timeout: any;\n    return function () {\n      const context = this, args = arguments;\n      const later = function () {\n        timeout = null;\n        func.apply(context, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  static checkTouchEvent(e: any): void {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n\n  static checkContentClassForEvent(gridster: GridsterComponentInterface, e: any): boolean {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static checkContentClassForEmptyCellClickEvent(gridster: GridsterComponentInterface, e: any): boolean {\n    return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)\n      || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n  }\n\n  static checkContentClass(target: any, current: any, contentClass: string): boolean {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n\n  static compareItems(a: { x: number, y: number }, b: { x: number, y: number }): number {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n","import {GridsterConfigS} from './gridsterConfigS.interface';\nimport {ChangeDetectorRef, NgZone, Renderer2} from '@angular/core';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\n\nexport abstract class GridsterComponentInterface {\n  $options: GridsterConfigS;\n  grid: Array<GridsterItemComponentInterface>;\n  checkCollision: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  positionXToPixels: (x: number) => number;\n  pixelsToPositionX: (x: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  positionYToPixels: (y: number) => number;\n  pixelsToPositionY: (y: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  findItemWithItem: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  findItemsWithItem: (item: GridsterItem) => Array<GridsterItemComponentInterface>;\n  checkGridCollision: (item: GridsterItem) => boolean;\n  el: any;\n  renderer: Renderer2;\n  gridRenderer: GridsterRenderer;\n  cdRef: ChangeDetectorRef;\n  options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  updateGrid: () => void;\n  movingItem: GridsterItem | null;\n  addItem: (item: GridsterItemComponentInterface) => void;\n  removeItem: (item: GridsterItemComponentInterface) => void;\n  previewStyle: (drag?: boolean) => void;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  windowResize: (() => void) | null;\n  setGridDimensions: (() => void);\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  zone: NgZone;\n  gridRows: Array<number>;\n  gridColumns: Array<number>;\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterEmptyCell {\n  initialItem: GridsterItem | null;\n  emptyCellClick: Function | null;\n  emptyCellClickTouch: Function | null;\n  emptyCellContextMenu: Function | null;\n  emptyCellDrop: Function | null;\n  emptyCellDrag: Function | null;\n  emptyCellDragTouch: Function | null;\n  emptyCellMMove: Function;\n  emptyCellMMoveTouch: Function;\n  emptyCellUp: Function;\n  emptyCellUpTouch: Function;\n  emptyCellMove: Function | null;\n  emptyCellExit: Function | null;\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.initialItem;\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridster;\n    if (this.emptyCellExit) {\n      this.emptyCellExit();\n      this.emptyCellExit = null;\n    }\n  }\n\n  updateOptions(): void {\n    if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n      this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n      this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n      this.emptyCellClick();\n      this.emptyCellClickTouch();\n      this.emptyCellClick = null;\n      this.emptyCellClickTouch = null;\n    }\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\n      this.gridster.options.emptyCellContextMenuCallback) {\n      this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n      this.emptyCellContextMenu();\n      this.emptyCellContextMenu = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n      this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n      this.gridster.zone.runOutsideAngular(() => {\n        this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n      });\n      this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n      this.emptyCellDrop();\n      this.emptyCellMove();\n      this.emptyCellExit();\n      this.emptyCellMove = null;\n      this.emptyCellDrop = null;\n      this.emptyCellExit = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n      this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n      this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n      this.emptyCellDrag();\n      this.emptyCellDragTouch();\n      this.emptyCellDrag = null;\n      this.emptyCellDragTouch = null;\n    }\n  }\n\n  emptyCellClickCb(e: any): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellClickCallback) {\n      this.gridster.options.emptyCellClickCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellContextMenuCb(e: any): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellContextMenuCallback) {\n      this.gridster.options.emptyCellContextMenuCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragDrop(e: any): void {\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellDropCallback) {\n      this.gridster.options.emptyCellDropCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragOver(e: any): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (item) {\n      e.dataTransfer.dropEffect = 'move';\n      this.gridster.movingItem = item;\n    } else {\n      e.dataTransfer.dropEffect = 'none';\n      this.gridster.movingItem = null;\n    }\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseDown(e: any): void {\n    if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    this.initialItem = item;\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n    this.gridster.zone.runOutsideAngular(() => {\n      this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n      this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n    });\n    this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n    this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n  }\n\n  emptyCellMouseMove(e: any): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (!item) {\n      return;\n    }\n\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseUp(e: any): void {\n    this.emptyCellMMove();\n    this.emptyCellMMoveTouch();\n    this.emptyCellUp();\n    this.emptyCellUpTouch();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (item) {\n      this.gridster.movingItem = item;\n    }\n    if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n      this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n    }\n    setTimeout(() => {\n      this.initialItem = null;\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n    this.gridster.cdRef.markForCheck();\n  }\n\n  getValidItemFromEvent(e: any, oldItem?: GridsterItem | null): GridsterItem | undefined {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.$options.margin;\n    const y = e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.$options.margin;\n    const item: GridsterItem = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n    if (this.gridster.checkCollision(item)) {\n      return;\n    }\n    return item;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { GridsterComponentInterface } from './gridster.interface';\nimport { GridsterItemComponentInterface } from './gridsterItemComponent.interface';\nimport { GridsterItem } from './gridsterItem.interface';\nimport { CompactType } from './gridsterConfig.interface';\n\n@Injectable()\nexport class GridsterCompact {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  checkCompact(): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactUp();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactUp();\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactLeft();\n        this.checkCompactUp();\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.checkCompactUp();\n        this.checkCompactRight();\n      }\n    }\n  }\n\n  checkCompactItem(item: GridsterItem): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveUpTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveUpTillCollision(item);\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveLeftTillCollision(item);\n        this.moveUpTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.moveUpTillCollision(item);\n        this.moveRightTillCollision(item);\n      }\n    }\n  }\n\n  checkCompactUp(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveUpTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.y = widget.$item.y;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveUpTillCollision(item: GridsterItem): boolean {\n    item.y -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.y += 1;\n      return false;\n    } else {\n      this.moveUpTillCollision(item);\n      return true;\n    }\n  }\n\n  checkCompactLeft(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveLeftTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.x = widget.$item.x;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  checkCompactRight(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    var l = this.gridster.grid.length;\n    for (var i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveRightTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.x = widget.$item.x;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveLeftTillCollision(item: GridsterItem): boolean {\n    item.x -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.x += 1;\n      return false;\n    } else {\n      this.moveLeftTillCollision(item);\n      return true;\n    }\n  }\n\n  moveRightTillCollision = function (item) {\n    item.x += 1;\n    if (this.gridster.checkCollision(item)) {\n      item.x -= 1;\n      return false;\n    }\n    else {\n      this.moveRightTillCollision(item);\n      return true;\n    }\n  };\n}\n","import {Injectable, Renderer2} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridType} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Injectable()\nexport class GridsterRenderer {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  updateItem(el: any, item: GridsterItem, renderer: Renderer2) {\n    if (this.gridster.mobile) {\n      renderer.setStyle(el, 'transform', '');\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', (item.rows * this.gridster.$options.fixedRowHeight) + 'px');\n      } else {\n        renderer.setStyle(el, 'height', (this.gridster.curWidth / 2 * item.rows) + 'px');\n      }\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, 'margin-right', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\n      const transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom: string | null = null;\n      let marginRight: string | null = null;\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, 'margin-right', marginRight);\n    }\n  }\n\n  updateGridster() {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      this.gridster.curColWidth = this.gridster.curRowHeight;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n\n    if (this.gridster.mobile) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n\n  getGridColumnStyle(i: number) {\n    return {\n      transform: 'translateX(' + this.gridster.curColWidth * i + 'px)',\n      width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getGridRowStyle(i: number) {\n    return {\n      transform: 'translateY(' + this.gridster.curRowHeight * i + 'px)',\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {GridsterConfigService} from './gridsterConfig.constant';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfigS} from './gridsterConfigS.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Component({\n  selector: 'gridster',\n  templateUrl: './gridster.html',\n  styleUrls: ['./gridster.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterComponent implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface {\n  @Input() options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  movingItem: GridsterItem | null;\n  previewStyle: () => void;\n  el: any;\n  $options: GridsterConfigS;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  grid: Array<GridsterItemComponentInterface>;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  gridColumns = [];\n  gridRows = [];\n  windowResize: (() => void) | null;\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  gridRenderer: GridsterRenderer;\n\n  constructor(el: ElementRef, public renderer: Renderer2, public cdRef: ChangeDetectorRef, public zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  }\n\n  static checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n    return item.x < item2.x + item2.cols\n      && item.x + item.cols > item2.x\n      && item.y < item2.y + item2.rows\n      && item.y + item.rows > item2.y;\n  }\n\n  ngOnInit(): void {\n    if (this.options.initCallback) {\n      this.options.initCallback(this);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.options) {\n      this.setOptions();\n      this.options.api = {\n        optionsChanged: this.optionsChanged.bind(this),\n        resize: this.onResize.bind(this),\n        getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n        getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n        getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n      };\n      this.columns = this.$options.minCols;\n      this.rows = this.$options.minRows;\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n\n  resize(): void {\n    let height;\n    let width;\n    if (this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n    if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n      this.onResize();\n    }\n  }\n\n  setOptions(): void {\n    this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n    if (!this.$options.disableWindowResize && !this.windowResize) {\n      this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n    } else if (this.$options.disableWindowResize && this.windowResize) {\n      this.windowResize();\n      this.windowResize = null;\n    }\n    this.emptyCell.updateOptions();\n  }\n\n  optionsChanged(): void {\n    this.setOptions();\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.updateOptions();\n    }\n    this.calculateLayout();\n  }\n\n  ngOnDestroy(): void {\n    if (this.windowResize) {\n      this.windowResize();\n    }\n    if (this.options.destroyCallback) {\n      this.options.destroyCallback(this);\n    }\n    if (this.options.api) {\n      this.options.api.resize = undefined;\n      this.options.api.optionsChanged = undefined;\n      this.options.api.getNextPossiblePosition = undefined;\n      this.options.api = undefined;\n    }\n    this.emptyCell.destroy();\n    delete this.emptyCell;\n    this.compact.destroy();\n    delete this.compact;\n  }\n\n  onResize(): void {\n    this.setGridSize();\n    this.calculateLayout();\n  }\n\n  checkIfToResize(): boolean {\n    const clientWidth = this.el.clientWidth;\n    const offsetWidth = this.el.offsetWidth;\n    const scrollWidth = this.el.scrollWidth;\n    const clientHeight = this.el.clientHeight;\n    const offsetHeight = this.el.offsetHeight;\n    const scrollHeight = this.el.scrollHeight;\n    const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\n      && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n    const horizontalScrollPresent = clientHeight < offsetHeight\n      && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n    if (verticalScrollPresent) {\n      return false;\n    }\n    return !horizontalScrollPresent;\n  }\n\n  setGridSize(): void {\n    let el = this.el;\n    let width = el.clientWidth;\n    let height = el.clientHeight;\n    if (this.$options.setGridSize || this.$options.gridType === 'fit' && !this.mobile) {\n      width = el.offsetWidth;\n      height = el.offsetHeight;\n    } else {\n      width = el.clientWidth;\n      height = el.clientHeight;\n    }\n    this.curWidth = width;\n    this.curHeight = height;\n  }\n\n  setGridDimensions(): void {\n    this.setGridSize();\n    if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.addClass(this.el, 'mobile');\n    } else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.removeClass(this.el, 'mobile');\n    }\n    let rows = this.$options.minRows, columns = this.$options.minCols;\n\n    let widgetsIndex = this.grid.length - 1, widget;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (!widget.notPlaced) {\n        rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n        columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n      }\n    }\n\n    if (this.columns !== columns || this.rows !== rows) {\n      this.columns = columns;\n      this.rows = rows;\n      if (this.options.gridSizeChangedCallback) {\n        this.options.gridSizeChangedCallback(this);\n      }\n    }\n  }\n\n  calculateLayout(): void {\n    if (this.compact) {\n      this.compact.checkCompact();\n    }\n\n    this.setGridDimensions();\n    if (this.$options.outerMargin) {\n      let marginWidth = -this.$options.margin;\n      if (this.$options.outerMarginLeft !== null) {\n        marginWidth += this.$options.outerMarginLeft;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginRight !== null) {\n        marginWidth += this.$options.outerMarginRight;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n      }\n      this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n      let marginHeight = -this.$options.margin;\n      if (this.$options.outerMarginTop !== null) {\n        marginHeight += this.$options.outerMarginTop;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginBottom !== null) {\n        marginHeight += this.$options.outerMarginBottom;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n      }\n      this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\n    } else {\n      this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n      this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\n      this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n    }\n    this.gridRenderer.updateGridster();\n\n    this.updateGrid();\n\n    if (this.$options.setGridSize) {\n      this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\n      this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\n    } else {\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.setSize();\n      widget.drag.toggle();\n      widget.resize.toggle();\n    }\n\n    setTimeout(this.resize.bind(this), 100);\n  }\n\n  updateGrid(): void {\n    if (this.$options.displayGrid === 'always' && !this.mobile) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n      this.renderer.removeClass(this.el, 'display-grid');\n    }\n    this.setGridDimensions();\n    this.gridColumns.length = Math.max(this.columns, Math.floor(this.curWidth / this.curColWidth)) || 0;\n    this.gridRows.length = Math.max(this.rows, Math.floor(this.curHeight / this.curRowHeight)) || 0;\n    this.cdRef.markForCheck();\n  }\n\n  addItem(itemComponent: GridsterItemComponentInterface): void {\n    if (itemComponent.$item.cols === undefined) {\n      itemComponent.$item.cols = this.$options.defaultItemCols;\n      itemComponent.item.cols = itemComponent.$item.cols;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.rows === undefined) {\n      itemComponent.$item.rows = this.$options.defaultItemRows;\n      itemComponent.item.rows = itemComponent.$item.rows;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n      this.autoPositionItem(itemComponent);\n    } else if (this.checkCollision(itemComponent.$item)) {\n      if (!this.$options.disableWarnings) {\n        itemComponent.notPlaced = true;\n        console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n      if (!this.$options.disableAutoPositionOnConflict) {\n        this.autoPositionItem(itemComponent);\n      } else {\n        itemComponent.notPlaced = true;\n      }\n    }\n    this.grid.push(itemComponent);\n    this.calculateLayoutDebounce();\n  }\n\n  removeItem(itemComponent: GridsterItemComponentInterface): void {\n    this.grid.splice(this.grid.indexOf(itemComponent), 1);\n    this.calculateLayoutDebounce();\n    if (this.options.itemRemovedCallback) {\n      this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n    }\n  }\n\n  checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let collision: GridsterItemComponentInterface | boolean = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItem(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n\n  checkGridCollision(item: GridsterItem): boolean {\n    const noNegativePosition = item.y > -1 && item.x > -1;\n    const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n    const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n    const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n    const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n    const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n    const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n    const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n    const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n    const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n    const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n    const area = item.cols * item.rows;\n    const inMinArea = minAreaLimit <= area;\n    const inMaxArea = maxAreaLimit >= area;\n    return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n  }\n\n  findItemWithItem(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n\n  findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n    const a: Array<GridsterItemComponentInterface> = [];\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n        a.push(widget);\n      }\n    }\n    return a;\n  }\n\n  autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n    if (this.getNextPossiblePosition(itemComponent.$item)) {\n      itemComponent.notPlaced = false;\n      itemComponent.item.x = itemComponent.$item.x;\n      itemComponent.item.y = itemComponent.$item.y;\n      itemComponent.itemChanged();\n    } else {\n      itemComponent.notPlaced = true;\n      if (!this.$options.disableWarnings) {\n        console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n    }\n  }\n\n  getNextPossiblePosition(newItem: GridsterItem, startingFrom: { y?: number, x?: number } = {}): boolean {\n    if (newItem.cols === -1) {\n      newItem.cols = this.$options.defaultItemCols;\n    }\n    if (newItem.rows === -1) {\n      newItem.rows = this.$options.defaultItemRows;\n    }\n    this.setGridDimensions();\n    let rowsIndex = startingFrom.y || 0, colsIndex;\n    for (; rowsIndex < this.rows; rowsIndex++) {\n      newItem.y = rowsIndex;\n      colsIndex = startingFrom.x || 0;\n      for (; colsIndex < this.columns; colsIndex++) {\n        newItem.x = colsIndex;\n        if (!this.checkCollision(newItem)) {\n          return true;\n        }\n      }\n    }\n    const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n    const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n    const addToRows = this.rows <= this.columns && canAddToRows;\n    if (!addToRows && canAddToColumns) {\n      newItem.x = this.columns;\n      newItem.y = 0;\n      return true;\n    } else if (canAddToRows) {\n      newItem.y = this.rows;\n      newItem.x = 0;\n      return true;\n    }\n    return false;\n  }\n\n  getFirstPossiblePosition(item: GridsterItem): GridsterItem {\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem);\n    return tmpItem;\n  }\n\n  getLastPossiblePosition(item: GridsterItem): GridsterItem {\n    let farthestItem: { y: number, x: number } = {y: 0, x: 0};\n    farthestItem = this.grid.reduce((prev: any, curr: GridsterItemComponentInterface) => {\n      const currCoords = {y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1};\n      if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n        return currCoords;\n      } else {\n        return prev;\n      }\n    }, farthestItem);\n\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem, farthestItem);\n    return tmpItem;\n  }\n\n  pixelsToPositionX(x: number, roundingMethod: Function, noLimit?: boolean): number {\n    const position = roundingMethod(x / this.curColWidth);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  pixelsToPositionY(y: number, roundingMethod: Function, noLimit?: boolean): number {\n    const position = roundingMethod(y / this.curRowHeight);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  positionXToPixels(x: number): number {\n    return x * this.curColWidth;\n  }\n\n  positionYToPixels(y: number): number {\n    return y * this.curRowHeight;\n  }\n}\n","import {GridsterItem} from './gridsterItem.interface';\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {Renderer2} from '@angular/core';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport abstract class GridsterItemComponentInterface {\n  item: GridsterItem;\n  $item: GridsterItem;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  updateOptions: () => void;\n  itemChanged: () => void;\n  setSize: () => void;\n  checkItemChanges: (newValue: GridsterItem, oldValue: GridsterItem) => void;\n  canBeDragged: () => boolean;\n  canBeResized: () => boolean;\n  el: any;\n  gridster: GridsterComponentInterface;\n  renderer: Renderer2;\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterSwap {\n  private swapedItem: GridsterItemComponentInterface | undefined;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n    delete this.swapedItem;\n  }\n\n  swapItems(): void {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n\n  checkSwapBack(): void {\n    if (this.swapedItem) {\n      const x: number = this.swapedItem.$item.x;\n      const y: number = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n\n    }\n  }\n\n  restoreSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n\n  setSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n\n  checkSwap(pushedBy: GridsterItemComponentInterface): void {\n    const gridsterItemCollision: any = this.gridster.checkCollision(pushedBy.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide: GridsterItemComponentInterface = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      gridsterItemCollide.$item.x = pushedBy.item.x || 0;\n      gridsterItemCollide.$item.y = pushedBy.item.y || 0;\n      pushedBy.$item.x = gridsterItemCollide.item.x || 0;\n      pushedBy.$item.y = gridsterItemCollide.item.y || 0;\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n      }\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterPush {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsTemp: Array<GridsterItemComponentInterface>;\n  private pushedItemsTempPath: Array<Array<{ x: number, y: number }>>;\n  private pushedItemsPath: Array<Array<{ x: number, y: number }>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private pushedItemsOrder: Array<GridsterItemComponentInterface>;\n  private tryPattern: {\n    fromEast: Array<Function>,\n    fromWest: Array<Function>,\n    fromNorth: Array<Function>,\n    fromSouth: Array<Function>,\n    [key: string]: Array<Function>\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string, disable?: boolean): boolean {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      const pushed = this.push(this.gridsterItem, direction);\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n\n  restoreTempItems(): void {\n    let i = this.pushedItemsTemp.length - 1;\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n    if (direction === '') {\n      return false;\n    }\n    const a: Array<GridsterItemComponentInterface> = this.gridster.findItemsWithItem(gridsterItem.$item);\n    let i = a.length - 1, itemCollision: GridsterItemComponentInterface;\n    let makePush = true;\n    const b: Array<GridsterItemComponentInterface> = [];\n    for (; i > -1; i--) {\n      itemCollision = a[i];\n      if (itemCollision === this.gridsterItem) {\n        makePush = false;\n        break;\n      }\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n      const compare = this.pushedItemsTemp.find((el: GridsterItemComponentInterface) => {\n        return el.$item.x === itemCollision.$item.x && el.$item.y === itemCollision.$item.y;\n      });\n      if (compare) {\n        makePush = false;\n        break;\n      }\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(b[0]);\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n    return makePush;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private addToTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n    this.pushedItemsTempPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n  }\n\n  private removeFromTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n    if (!tempPosition) {\n      return;\n    }\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0},\n        {x: gridsterItem.$item.x, y: gridsterItem.$item.y}]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private removeFromPushedItem(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItems.indexOf(gridsterItem);\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition, x, y;\n    let change = false;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n    return change;\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { GridsterSwap } from './gridsterSwap.service';\nimport { cancelScroll, scroll } from './gridsterScroll.service';\nimport { GridsterPush } from './gridsterPush.service';\nimport { GridsterUtils } from './gridsterUtils.service';\nimport { GridsterItemComponentInterface } from './gridsterItemComponent.interface';\nimport { GridsterComponentInterface } from './gridster.interface';\n\n@Injectable()\nexport class GridsterDraggable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  offsetLeft: number;\n  offsetTop: number;\n  margin: number;\n  diffTop: number;\n  diffLeft: number;\n  top: number;\n  left: number;\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  positionXBackup: number;\n  positionYBackup: number;\n  enabled: boolean;\n  dragStartFunction: (event: any) => void;\n  dragFunction: (event: any) => void;\n  dragStopFunction: (event: any) => void;\n  mousemove: Function;\n  mouseup: Function;\n  mouseleave: Function;\n  cancelOnBlur: Function;\n  touchmove: Function;\n  touchend: Function;\n  touchcancel: Function;\n  mousedown: Function;\n  touchstart: Function;\n  push: GridsterPush;\n  swap: GridsterSwap;\n  path: Array<{ x: number, y: number }>;\n  collision: GridsterItemComponentInterface | boolean = false;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n\n  destroy(): void {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n    delete this.collision;\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStart(e: any): void {\n    switch (e.which) {\n      case 1:\n        // left mouse button\n        break;\n      case 2:\n      case 3:\n        // right or middle mouse button\n        return;\n    }\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({ x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0 });\n  }\n\n  dragMove(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse,\n      this.calculateItemPositionFromMousePosition.bind(this));\n\n    this.calculateItemPositionFromMousePosition(e);\n  }\n\n  calculateItemPositionFromMousePosition(e: any): void {\n    this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.calculateItemPosition();\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n\n    cancelScroll();\n    this.cancelOnBlur();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    this.path = [];\n    if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n      Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n    } else {\n      this.makeDrag();\n    }\n    setTimeout(() => {\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle(true);\n      }\n    });\n  }\n\n  cancelDrag() {\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    if (this.push) {\n      this.push.restoreItems();\n    }\n    if (this.swap) {\n      this.swap.restoreSwapItem();\n    }\n    if (this.push) {\n      this.push.destroy();\n      delete this.push;\n    }\n    if (this.swap) {\n      this.swap.destroy();\n      delete this.swap;\n    }\n  }\n\n  makeDrag() {\n    if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\n      && this.gridster.options.draggable.dropOverItemsCallback\n      && this.collision && this.collision !== true && this.collision.$item) {\n      this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n    }\n    this.collision = false;\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    if (this.push) {\n      this.push.setPushedItems();\n    }\n    if (this.swap) {\n      this.swap.setSwapItem();\n    }\n    if (this.push) {\n      this.push.destroy();\n      delete this.push;\n    }\n    if (this.swap) {\n      this.swap.destroy();\n      delete this.swap;\n    }\n  }\n\n  calculateItemPosition() {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n    this.gridsterItem.$item.y = this.positionY;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n    const transform = 'translate(' + this.left + 'px, ' + this.top + 'px)';\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({ x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y });\n      }\n      this.push.checkPushBack();\n    }\n    this.gridster.previewStyle(true);\n  }\n\n  toggle() {\n    const enableDrag = this.gridsterItem.canBeDragged();\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.dragStartFunction = this.dragStartDelay.bind(this);\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStartDelay(e: any): void {\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n      return;\n    }\n    if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n      return;\n    }\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.draggable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.draggable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: any) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Injectable()\nexport class GridsterPushResize {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsPath: Array<Array<GridsterItem>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private tryPattern: {\n    fromEast: Function,\n    fromWest: Function,\n    fromNorth: Function,\n    fromSouth: Function,\n    [key: string]: Function\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string): boolean {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    const gridsterItemCollision: any = this.gridster.checkCollision(gridsterItem.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true &&\n      gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n    return false;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([\n        {\n          x: gridsterItem.item.x || 0,\n          y: gridsterItem.item.y || 0,\n          cols: gridsterItem.item.cols || 0,\n          rows: gridsterItem.item.rows || 0\n        },\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push(\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        });\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition: { x: number, y: number, cols: number, rows: number }, x, y, cols, rows;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n    return false;\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\n\nimport {cancelScroll, scroll} from './gridsterScroll.service';\nimport {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterPush} from './gridsterPush.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterPushResize} from './gridsterPushResize.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterResizable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  itemBackup: Array<number>;\n  resizeEventScrollType: GridsterResizeEventType;\n  directionFunction: Function;\n  dragFunction: (event: any) => void;\n  dragStopFunction: (event: any) => void;\n  resizeEnabled: boolean;\n  mousemove: Function;\n  mouseup: Function;\n  mouseleave: Function;\n  cancelOnBlur: Function;\n  touchmove: Function;\n  touchend: Function;\n  touchcancel: Function;\n  push: GridsterPush;\n  pushResize: GridsterPushResize;\n  minHeight: number;\n  minWidth: number;\n  offsetTop: number;\n  offsetLeft: number;\n  diffTop: number;\n  diffLeft: number;\n  diffRight: number;\n  diffBottom: number;\n  margin: number;\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  width: number;\n  height: number;\n  newPosition: number;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {w: false, e: false, n: false, s: false};\n  }\n\n  destroy(): void {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n  }\n\n  dragStart(e: any): void {\n    switch (e.which) {\n      case 1:\n        // left mouse button\n        break;\n      case 2:\n      case 3:\n        // right or middle mouse button\n        return;\n    }\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\n      - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\n      - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.directionFunction = this.handleN;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.directionFunction = this.handleS;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleE;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleNW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleNE;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleSW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleSE;\n    }\n  }\n\n  dragMove(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true,\n      this.resizeEventScrollType);\n    this.directionFunction(e);\n\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.cancelOnBlur();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n      Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeResize.bind(this), this.cancelResize.bind(this));\n    } else {\n      this.makeResize();\n    }\n    setTimeout(() => {\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n  }\n\n  cancelResize(): void {\n    this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n    this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.pushResize.restoreItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  makeResize(): void {\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.pushResize.setPushedItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  handleN(e: any): void {\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.height = this.bottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n      this.top = this.bottom - this.minHeight;\n    }\n    this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n    if (this.gridsterItem.$item.y !== this.newPosition) {\n      this.itemBackup[1] = this.gridsterItem.$item.y;\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n      this.gridsterItem.$item.y = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromSouth);\n      this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.y = this.itemBackup[1];\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemTop(this.top);\n    this.setItemHeight(this.height);\n  }\n\n  handleW(e: any): void {\n    this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    this.width = this.right - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n      this.left = this.right - this.minWidth;\n    }\n    this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n    if (this.gridsterItem.$item.x !== this.newPosition) {\n      this.itemBackup[0] = this.gridsterItem.$item.x;\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n      this.gridsterItem.$item.x = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromEast);\n      this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.x = this.itemBackup[0];\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemLeft(this.left);\n    this.setItemWidth(this.width);\n  }\n\n  handleS(e: any): void {\n    this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n    }\n    this.bottom = this.top + this.height;\n    this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n    if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n      this.pushResize.pushItems(this.pushResize.fromNorth);\n      this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemHeight(this.height);\n  }\n\n  handleE(e: any): void {\n    this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n    }\n    this.right = this.left + this.width;\n    this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n    if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n      this.pushResize.pushItems(this.pushResize.fromWest);\n      this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemWidth(this.width);\n  }\n\n  handleNW(e: any): void {\n    this.handleN(e);\n    this.handleW(e);\n  }\n\n  handleNE(e: any): void {\n    this.handleN(e);\n    this.handleE(e);\n  }\n\n  handleSW(e: any): void {\n    this.handleS(e);\n    this.handleW(e);\n  }\n\n  handleSE(e: any): void {\n    this.handleS(e);\n    this.handleE(e);\n  }\n\n  toggle(): void {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n  }\n\n  dragStartDelay(e: any): void {\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: any) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  setItemTop(top: number): void {\n    const transform = 'translate(' + this.left + 'px, ' + top + 'px)';\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n  }\n\n  setItemLeft(left: number): void {\n    const transform = 'translate(' + left + 'px, ' + this.top + 'px)';\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n  }\n\n  setItemHeight(height: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n\n  setItemWidth(width: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n}\n","import {Component, ElementRef, Host, Input, NgZone, OnDestroy, OnInit, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-item',\n  templateUrl: './gridsterItem.html',\n  styleUrls: ['./gridsterItem.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterItemComponent implements OnInit, OnDestroy, GridsterItemComponentInterface {\n  @Input() item: GridsterItem;\n  $item: GridsterItem;\n  el: any;\n  gridster: GridsterComponent;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  init: boolean;\n\n  constructor(el: ElementRef, @Host() gridster: GridsterComponent, public renderer: Renderer2, private zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1,\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n\n  ngOnInit(): void {\n    this.updateOptions();\n    this.gridster.addItem(this);\n  }\n\n  updateOptions(): void {\n    this.$item = GridsterUtils.merge(this.$item, this.item, {\n      cols: undefined,\n      rows: undefined,\n      x: undefined,\n      y: undefined,\n      dragEnabled: undefined,\n      resizeEnabled: undefined,\n      compactEnabled: undefined,\n      maxItemRows: undefined,\n      minItemRows: undefined,\n      maxItemCols: undefined,\n      minItemCols: undefined,\n      maxItemArea: undefined,\n      minItemArea: undefined,\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.gridster.removeItem(this);\n    delete this.gridster;\n    this.drag.destroy();\n    delete this.drag;\n    this.resize.destroy();\n    delete this.resize;\n  }\n\n  setSize(): void {\n    this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n    this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n    this.updateItemSize();\n  }\n\n  updateItemSize() {\n    const top = this.$item.y * this.gridster.curRowHeight;\n    const left = this.$item.x * this.gridster.curColWidth;\n    const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n    const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n\n    if (!this.init && width > 0 && height > 0) {\n      this.init = true;\n      if (this.item.initCallback) {\n        this.item.initCallback(this.item, this);\n      }\n      if (this.gridster.options.itemInitCallback) {\n        this.gridster.options.itemInitCallback(this.item, this);\n      }\n      if (this.gridster.$options.scrollToNewItems) {\n        this.el.scrollIntoView(false);\n      }\n    }\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      if (this.gridster.options.itemResizeCallback) {\n        this.gridster.options.itemResizeCallback(this.item, this);\n      }\n    }\n    this.top = top;\n    this.left = left;\n  }\n\n  itemChanged(): void {\n    if (this.gridster.options.itemChangeCallback) {\n      this.gridster.options.itemChangeCallback(this.item, this);\n    }\n  }\n\n  checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n    if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n      return;\n    }\n    if (this.gridster.checkCollision(this.$item)) {\n      this.$item.x = oldValue.x || 0;\n      this.$item.y = oldValue.y || 0;\n      this.$item.cols = oldValue.cols || 1;\n      this.$item.rows = oldValue.rows || 1;\n      this.setSize();\n    } else {\n      this.item.cols = this.$item.cols;\n      this.item.rows = this.$item.rows;\n      this.item.x = this.$item.x;\n      this.item.y = this.$item.y;\n      this.gridster.calculateLayoutDebounce();\n      this.itemChanged();\n    }\n  }\n\n  canBeDragged(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n  }\n\n  canBeResized(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n  }\n\n}\n","import {Component, ElementRef, Host, OnDestroy, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-preview',\n  template: '',\n  styleUrls: ['./gridsterPreview.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterPreviewComponent implements OnDestroy {\n  el: any;\n  gridster: GridsterComponent;\n\n  constructor(el: ElementRef, @Host() gridster: GridsterComponent, public renderer: Renderer2) {\n    this.el = el.nativeElement;\n    this.gridster = gridster;\n    this.gridster.previewStyle = this.previewStyle.bind(this);\n  }\n\n  ngOnDestroy(): void {\n    delete this.el;\n    delete this.gridster.previewStyle;\n    delete this.gridster;\n  }\n\n  previewStyle(drag?: boolean): void {\n    if (!this.gridster.movingItem) {\n      this.renderer.setStyle(this.el, 'display', '');\n    } else {\n      if (this.gridster.compact && drag) {\n        this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n      }\n      this.renderer.setStyle(this.el, 'display', 'block');\n      this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\nimport {GridsterItemComponent} from './gridsterItem.component';\nimport {GridsterPreviewComponent} from './gridsterPreview.component';\n\n@NgModule({\n  declarations: [\n    GridsterComponent,\n    GridsterItemComponent,\n    GridsterPreviewComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [GridsterComponent, GridsterItemComponent],\n  providers: [],\n  bootstrap: []\n})\nexport class GridsterModule {\n}\n"]}